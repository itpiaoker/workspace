{"version":3,"sources":["app.js"],"names":["auth","app","angular","module","config","$locationProvider","$routeProvider","$httpProvider","defaults","headers","put","post","html5Mode","when","templateUrl","controller","otherwise","redirectTo","paceOptions","elements","restartOnRequestAfter","extend","Pace","options","httpInit","provider","httpInterceptor","$inject","$q","$rootScope","AUTH_EVENTS","TOKEN","CURRENTUSERID","console","log","request","token","get","trim","window","location","replace","key","response","data","isObject","responseError","rejection","reject","interceptors","push","$scope","CURRENTUSER","currentUser"],"mappings":"AAAA;;AACA,IAAMA,OAAO;AACb,IAAMC,MAAMC,QAAQC,OAAO,iBACvB,CAAC,aAAa,YAAY,eAAe,UAAU,WAAW,cAAc,gBAAgB,QAAQ;;AAExGF,IAAIG,gEAAO,UAAUC,mBAAmBC,gBAAgBC,eAAe;IACnEA,cAAcC,SAASC,QAAQC,IAAI,kBAAkB;IACrDH,cAAcC,SAASC,QAAQC,IAAI,sBAAsB;IACzDH,cAAcC,SAASC,QAAQE,KAAK,kBAAkB;IACtDJ,cAAcC,SAASC,QAAQE,KAAK,sBAAsB;IAC1DN,kBAAkBO,UAAU;;IAE5BN,eACKO,KAAK,KAAK;QACPC,aAAa;QACbC,YAAY;OACbF,KAAK,cAAc;QACtBC,aAAa;QACbC,YAAY;OACbF,KAAK,kBAAkB;QACtBC,aAAa;QACbC,YAAY;OACbF,KAAK,eAAe;QACnBC,aAAa;QACbC,YAAY;OACbF,KAAK,eAAe;QACnBC,aAAa;QACbC,YAAY;OACbF,KAAK,cAAc;QAClBC,aAAa;QACbC,YAAY;OACbF,KAAK,WAAW;QACfC,aAAa;QACbC,YAAY;OACbF,KAAK,aAAa;QACjBC,aAAa;QACbC,YAAY;OACbF,KAAK,UAAU;QACdC,aAAa;QACbC,YAAY;OACbF,KAAK,WAAW;QACfC,aAAa;QACbC,YAAY;OACbF,KAAK,YAAY;QAChBC,aAAa;QACbC,YAAY;OACbF,KAAK,aAAa;QACjBC,aAAa;QACbC,YAAY;OACbC,UAAU;QACTC,YAAY;;IAEhB,IAAIC,cAAc;QACdC,UAAU;;QAEVC,uBAAuB;;IAE3BlB,QAAQmB,OAAOC,KAAKC,SAASL;;;IAG7B,SAASM,SAASC,UAAU;QACxBC,gBAAgBC,UAAU,CAAC,MAAM,cAAc,eAAe;;QAE9D,SAASD,gBAAgBE,IAAIC,YAAYC,aAAaC,OAAMC,eAAe;YACvEC,QAAQC,IAAI;YACZ,OAAO;gBACHC,SADG,SAAA,QACK/B,QAAQ;oBACZ,IAAIgC,QAAQL,MAAMM;;oBAElB,IAAIrC,MAAM;wBACN,IAAI,CAACoC,SAASA,MAAME,WAAW,IAAI;4BAC/BC,OAAOC,SAASC,QAAQ;;;oBAGhCrC,OAAOK,QAAQsB,MAAMW,OAAON;;oBAE5B,OAAOhC;;gBAEXuC,UAbG,SAAA,SAaMA,WAAU;oBACf,IAAIC,OAAOD,UAASC;oBACpB,IAAI1C,QAAQ2C,SAASD,OAAO;;;;;;;;;;;;oBAY5B,OAAOD;;gBAEXG,eA7BG,SAAA,cA6BWC,WAAW;oBACrB,OAAOnB,GAAGoB,OAAOD;;;;;QAK7BtB,SAASwB,aAAaC,KAAKxB;;;IAG/BF,SAASjB;;;AAGbN,IAAIc,WAAW,8CAAoB,UAAUoC,QAAQC,aAAa;;IAE9DnB,QAAQC,IAAIkB;IACZD,OAAOE,cAAcD,YAAYf,IAAI;IAHzC","file":"app.js","sourcesContent":["'use strict';\r\nconst auth = false;\r\nconst app = angular.module('raysdata.zeta',\r\n    ['ngAnimate', 'uiSwitch', 'ui.checkbox', 'ui.ace', 'ngRoute', 'ngResource', 'ui.bootstrap', 'nvd3', 'ngCookies']);\r\n\r\napp.config(function ($locationProvider, $routeProvider, $httpProvider) {\r\n    $httpProvider.defaults.headers.put['Content-Type'] = 'application/json;charset=utf-8';\r\n    $httpProvider.defaults.headers.put['Content-Encoding'] = 'UTF-8';\r\n    $httpProvider.defaults.headers.post['Content-Type'] = 'application/json;charset=utf-8';\r\n    $httpProvider.defaults.headers.post['Content-Encoding'] = 'UTF-8';\r\n    $locationProvider.html5Mode(false);\r\n\r\n    $routeProvider\r\n        .when('/', {\r\n            templateUrl: 'views/channel.html',\r\n            controller: 'ChannelController'\r\n        }).when('/knowledge', {\r\n        templateUrl: 'views/knowledge.html',\r\n        controller: 'KnowledgeController'\r\n    }).when('/knowledgeinfo', {\r\n        templateUrl: 'views/knowledgeinfo.html',\r\n        controller: 'KnowledgeInfoController'\r\n    }).when('/datasource', {\r\n        templateUrl: 'views/datasource.html',\r\n        controller: 'DataSourceController'\r\n    }).when('/dictionary', {\r\n        templateUrl: 'views/dictionary.html',\r\n        controller: 'DictionaryController'\r\n    }).when('/collector', {\r\n        templateUrl: 'views/collector.html',\r\n        controller: 'CollectorController'\r\n    }).when('/parser', {\r\n        templateUrl: 'views/parser/list.html',\r\n        controller: 'ParserController'\r\n    }).when('/analyzer', {\r\n        templateUrl: 'views/analyzer/list.html',\r\n        controller: 'AnalyzerController'\r\n    }).when('/timer', {\r\n        templateUrl: 'views/timer.html',\r\n        controller: 'TimerController'\r\n    }).when('/writer', {\r\n        templateUrl: 'views/writer.html',\r\n        controller: 'WriterController'\r\n    }).when('/metrics', {\r\n        templateUrl: 'views/metrics.html',\r\n        controller: 'MetricsController'\r\n    }).when('/modeling', {\r\n        templateUrl: 'views/modeling.html',\r\n        controller: 'ModelingController'\r\n    }).otherwise({\r\n        redirectTo: '/'\r\n    });\r\n    let paceOptions = {\r\n        elements: false,\r\n        //大于20ms 的请求显示进度\r\n        restartOnRequestAfter: 20\r\n    };\r\n    angular.extend(Pace.options, paceOptions);\r\n\r\n    //初始化httpProvider\r\n    function httpInit(provider) {\r\n        httpInterceptor.$inject = ['$q', '$rootScope', 'AUTH_EVENTS', 'TOKEN'];\r\n\r\n        function httpInterceptor($q, $rootScope, AUTH_EVENTS, TOKEN,CURRENTUSERID) {\r\n            console.log('into interceptor......');\r\n            return {\r\n                request(config) {\r\n                    let token = TOKEN.get();\r\n                    //let currentUserId = CURRENTUSERID.get();\r\n                    if (auth) {\r\n                        if (!token || token.trim() === '') {\r\n                            window.location.replace('login.html')\r\n                        }\r\n                    }\r\n                    config.headers[TOKEN.key] = token;\r\n                    //config.headers[CURRENTUSERID.key] = currentUserId;\r\n                    return config;\r\n                },\r\n                response(response) {\r\n                    let data = response.data;\r\n                    if (angular.isObject(data)) {\r\n                        /*//会话超时\r\n                        if (data.statusCode !== undefined && data.statusCode === 3) {\r\n                            $rootScope.$broadcast(AUTH_EVENTS.SessionTimeout);\r\n                            throw AUTH_EVENTS.SessionTimeout;\r\n                        }\r\n                        //License过期\r\n                        if (data.statusCode !== undefined && data.statusCode === 1001) {\r\n                            $rootScope.$broadcast(AUTH_EVENTS.LicenseExpired,data);\r\n                            throw AUTH_EVENTS.LicenseExpired;\r\n                        }*/\r\n                    }\r\n                    return response;\r\n                },\r\n                responseError(rejection) {\r\n                    return $q.reject(rejection);\r\n                }\r\n            }\r\n        }\r\n\r\n        provider.interceptors.push(httpInterceptor);\r\n    }\r\n\r\n    httpInit($httpProvider);\r\n});\r\n\r\napp.controller('HeaderController', function ($scope, CURRENTUSER) {\r\n    //$scope.currentUser = TOKEN.get('superadmin')\r\n    console.log(CURRENTUSER);\r\n    $scope.currentUser = CURRENTUSER.get('CURRENTUSER');\r\n});\r\n\r\n"]}