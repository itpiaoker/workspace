{"version":3,"sources":["directives/tree-directice.js"],"names":["app","directive","require","restrict","link","$scope","element","attrs","ngModel","hasNodeClick","nodeClick","nodeClickMethod","substring","lastIndexOf","hasSetting","setting","defaultSetting","view","dblClickExpand","data","simpleData","enable","idKey","pIdKey","edit","async","contentType","type","dataType","url","autoParam","otherParam","dataFilter","callback","onClick","event","treeId","treeNode","clickFlag","$apply","$setViewValue","method","$eval","tree","$","fn","zTree","getZTreeObj","result","call","target","stopPropagation","onCollapse","onExpand","nodeData","$watch","newValue","oldValue","$promise","then","nodes","initTree","angular","copy","$scopeSetting","extend","init","on","$this","hasClass","node","getNodeByTId","parent","attr","expandNode","scope","replace","set","isParent","name","id","nval","oval","$id","getNodeByParam","parentId","selectNode","clear","destroy","$on","template"],"mappings":"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","file":"tree-directice.js","sourcesContent":["/**\r\n * Created by zhhuiyan on 16/9/11.\r\n */\r\n/**\r\n * ztree适配angular实现\r\n * 指令:ztree，ng-model：必须绑定，node-click：绑定节点点击事件，node-data：绑定数据源\r\n * 用例：<ul id=\\'xxx\\' class=\\'ztree\\' ztree ng-model=\\'selectNode\\' node-click=\\'nodeClick()\\' node-data=\\'treeDatas\\'></ul>\r\n */\r\napp.directive('ztree', function () {\r\n    return {\r\n        require: '?ngModel',\r\n        restrict: 'A',\r\n        link: function ($scope, element, attrs, ngModel) {\r\n\r\n\r\n            let hasNodeClick = attrs.nodeClick && attrs.nodeClick != null,\r\n                nodeClickMethod = hasNodeClick ? attrs.nodeClick.substring(0, attrs.nodeClick.lastIndexOf('(')) : '';\r\n            let hasSetting = attrs.setting && attrs.setting != null;\r\n            let defaultSetting = {\r\n                view: {\r\n                    dblClickExpand: false\r\n                },\r\n                data: {\r\n                    simpleData: {\r\n                        enable: true,\r\n                        idKey: 'id',\r\n                        pIdKey: 'parentId'\r\n                    }\r\n                },\r\n                edit: {},\r\n                async: {\r\n                    enable: false,\r\n                    contentType: 'application/x-www-form-urlencoded',\r\n                    type: 'post',\r\n                    dataType: 'text',\r\n                    url: '',\r\n                    autoParam: [],\r\n                    otherParam: [],\r\n                    dataFilter: null\r\n                },\r\n                callback: {\r\n                    onClick: function (event, treeId, treeNode, clickFlag) {\r\n                        $scope.$apply(function () {\r\n                            ngModel.$setViewValue(treeNode);\r\n                            let method = $scope.$eval(nodeClickMethod);\r\n                            if (hasNodeClick && method) {\r\n                                let tree = $.fn.zTree.getZTreeObj(treeId);\r\n                                let result = method.call(event.target, treeNode, tree, clickFlag);\r\n                                if (result === false) {\r\n                                    event.stopPropagation();\r\n                                }\r\n                            }\r\n                        });\r\n                    },\r\n                    onCollapse: function (event) {\r\n                        event.stopPropagation();\r\n                    },\r\n                    onExpand: function (event) {\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n            };\r\n            if (attrs.nodeData) {\r\n                $scope.$watch(attrs.nodeData, function (newValue, oldValue) {\r\n                    if (newValue && newValue.$promise) {\r\n                        newValue.$promise.then(function (nodes) {\r\n                            initTree(element, angular.copy(nodes));\r\n                        });\r\n                    } else {\r\n                        initTree(element, angular.copy(newValue));\r\n                    }\r\n                });\r\n            }\r\n            function initTree(element, nodes) {\r\n                let setting = angular.copy(defaultSetting);\r\n                let $scopeSetting = $scope[attrs.setting];\r\n                if (hasSetting && $scopeSetting) {\r\n                    angular.extend(setting.view, $scopeSetting.view);\r\n                    angular.extend(setting.data, $scopeSetting.data);\r\n                    angular.extend(setting.async, $scopeSetting.async);\r\n                    angular.extend(setting.edit, $scopeSetting.edit);\r\n                    angular.extend(setting.callback, $scopeSetting.callback);\r\n                }\r\n                let tree = $.fn.zTree.init(element, setting, nodes);\r\n                element.on('click', 'span[treenode_switch]', function (event) {\r\n                    event.stopPropagation();\r\n                    let $this = angular.element(this);\r\n                    if ($this.hasClass('root_close') || $this.hasClass('root_open')\r\n                        || $this.hasClass('center_close') || $this.hasClass('center_open')\r\n                        || $this.hasClass('bottom_close') || $this.hasClass('bottom_open')) {\r\n                        let node = tree.getNodeByTId($this.parent().attr('id'));\r\n                        tree.expandNode(node);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    };\r\n});\r\n\r\napp.directive('treeInput', ['$parse', function () {\r\n    return {\r\n        restrict: 'A',\r\n        scope: {\r\n            ngModel: '=',\r\n            data: '=',\r\n            callback: '=',\r\n        },\r\n        replace: true,\r\n        link: function ($scope, element, attrs) {\r\n            $scope.set = function (node, tree) {\r\n                if (node.isParent) {\r\n                    tree.expandNode(node);\r\n                    return false;\r\n                } else {\r\n                    if (!$scope.node) {\r\n                        $scope.node = {};\r\n                    }\r\n                    $scope.node.view = node.name;\r\n                    if ($scope.ngModel) {\r\n                        angular.extend($scope.ngModel, {name: node.name, id: node.id});\r\n                    }\r\n                    if ($scope.callback) {\r\n                        $scope.callback(node.id, node.name);\r\n                    }\r\n                }\r\n            };\r\n            if (attrs.ngModel) {\r\n                if ($scope.node && $scope.node.view)\r\n                    delete $scope.node.view;\r\n                $scope.$watch('ngModel', function (nval, oval) {\r\n                    if (nval) {\r\n                        let tree = $.fn.zTree.getZTreeObj('ztree_' + $scope.$id);\r\n                        $scope.set(nval, tree, 0, $scope);\r\n                        let node = tree.getNodeByParam('id', nval.id);\r\n                        if (node) {\r\n                            tree.expandNode(tree.getNodeByParam('id', node.parentId));\r\n                            tree.selectNode(node);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            //添加表单资产类型清除按钮\r\n            $scope.clear = function () {\r\n                delete $scope.node.view;\r\n            };\r\n            function destroy() {\r\n                let tree = $.fn.zTree.getZTreeObj('ztree_' + $scope.$id);\r\n                if (tree) {\r\n                    tree.destroy();\r\n                }\r\n            }\r\n\r\n            $scope.$on('$destroy', destroy);\r\n\r\n        },\r\n        template: '<div class=\\'input-group\\'>\\\r\n                       <input type=\\'text\\' placeholder=\\'资产类型\\' name=\\'treeName\\' readonly=\\'readonly\\' class=\\'form-control op_log_type\\' \\\r\n                          data-toggle=\\'dropdown\\'  ng-model=\\'node.view\\' required>\\\r\n                        <span title=\\'清除\\' class=\\'input-group-addon op_clear_log_type mouse-on\\'  ng-click=\\'clear()\\'>\\\r\n                            <i class=\\'fa fa-eraser fa-fw\\'></i>\\\r\n                        </span>\\\r\n                        <div class=\\'dropdown-menu\\'>\\\r\n                            <ul id=\\'ztree_{{$id}}\\' class=\\'ztree search\\' ztree ng-model=\\'node\\' \\\r\n                                node-click=\\'set()\\'\\\r\n                                node-data=\\'data\\'>\\\r\n                        </ul>\\\r\n                        </div>\\\r\n                    </div>'\r\n    };\r\n}]);\r\n"]}