{"version":3,"sources":["controllers/parser.js"],"names":["app","controller","$scope","$rootScope","$location","Util","Parser","Knowledge","DataSource","$path","path","bind","previewFields","datasources","query","dsPreview","preview","id","rule","datasource","data","datas","showPreview","$","show","all","knowledges","modal","uploadFile","message","$edit_table","$search_table","upload_table","list","file","myFile","reader","FileReader","allList","length","forEach","value","push","onloadend","e","wrapper","angular","fromJson","result","parser","filter","item","equals","name","knowledgeList","knowledge","cases","c","index","console","log","ref","inArray","default","get","status","fromRule","slideDown","slideUp","readAsText","clazz","edit","search","searchDataSourceForm","sample","resetFormValidateState","add_form","slideToggle","page","reload","toRule","filters","delimit","replace","fields","ff","split","tab","i","sep","obj","j","x","reduce","first","second","hasOwnProperty","saveRule","form","$valid","properties","type","subtype","save","saveOrEdit","changeType","delete","delete_id","confirm_yes","find","off","click","compare","reg","test","firstRT","exec","secondRT","initFields","callback","k","toJSON","rt","sort","key","match","addDelimitField","removeDelimitField","splice","removeFilter","addFilter","ruleChange","reParserChange","reParser","caseDefaultChange","addFilterTuple","removeFilterTuple","addFilterOne","removeFilterOne","parent","addFilterDefaultTuple","removeFilterDefaultTuple","addFilterDefaultOne","removeFilterDefaultOne","addCase","removeCase","findex","caseChange","fIndex","addCaseTuple","isArray","removeCaseTuple","addCaseOne","removeCaseOne","cindex","resetPreview","$submitted","addProperty","deleteProperty","properties_index_refresh","property_index","properties_count","children","each","closest","attr","log_property_list_clean","remove","hide","downloadFile","sqlItemId","download","response","fileName","decodeURI","url","URL","createObjectURL","Blob","a","document","createElement","body","appendChild","href","target"],"mappings":"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","file":"parser.js","sourcesContent":["'use strict';\r\n\r\napp.controller('ParserController', function ($scope, $rootScope, $location, Util, Parser, Knowledge, DataSource) {\r\n    //页面目录\r\n    $rootScope.$path = $location.path.bind($location);\r\n\r\n    $scope.previewFields = [];\r\n    $scope.datasources = DataSource.query();\r\n\r\n\r\n    $scope.dsPreview = function () {\r\n\r\n        DataSource.preview({id: $scope.rule.datasource}, function (data) {\r\n            $scope.datas = data;//.map((item, index) => JSON.stringify(item)).reduce((pre, cur) => pre + \"\\n#next#\" + cur);\r\n            //$scope.rule.sample = data.map((item, index) => JSON.stringify(item)).reduce((pre, cur) => pre + \"\\n#next#\" + cur);\r\n            $scope.showPreview = true;\r\n            $('#log_property_list').show();\r\n        });\r\n    };\r\n    $scope.all = Parser.query();\r\n    $scope.knowledges = Knowledge.query();//.queryByStatus();\r\n    $('#addModal').modal('hide');\r\n    $scope.uploadFile = function () {\r\n        delete $scope.message;\r\n        let $edit_table = $('.hla-widget-add-table');\r\n        let $search_table = $('.hla-widget-search-table');\r\n        let upload_table = $('.hla-widget-upload-table');\r\n        let list = $('.hla-widget-data-table');\r\n        let file = $scope.myFile;\r\n        let reader = new FileReader();\r\n        let allList = [];\r\n        if ($scope.all.length > 0) {\r\n            $scope.all.forEach(function (value) {\r\n                allList.push(value.id);\r\n            });\r\n        }\r\n        reader.onloadend = function (e) {\r\n            let wrapper = angular.fromJson(this.result);\r\n            if (wrapper.parser && wrapper.parser.filter && wrapper.parser.filter.length > 0) {\r\n                wrapper.parser.filter.forEach(function (item) {\r\n                    if(angular.equals(item.name, 'byKnowledge')){\r\n                        //删除不存在的知识库\r\n                        let knowledgeList = $scope.knowledges.filter(function (knowledge) {\r\n                            return knowledge.id == item.id;\r\n\r\n                        });\r\n                        if (knowledgeList.length == 0) {\r\n                            item.id=''\r\n                        }\r\n                    }\r\n\r\n                    if (item.cases) {\r\n                        item.cases.forEach(function (c, index) {\r\n                            console.log(c);\r\n                            if (c.rule && c.rule.ref && -1 === $.inArray(c.rule.ref, allList)) {\r\n                                c.rule.ref = '';\r\n                            }\r\n                        });\r\n                    }\r\n                    if (item.default && item.default.ref && -1 === $.inArray(item.default.ref, allList)) {\r\n                        item.default.ref = '';\r\n\r\n                    }\r\n                })\r\n            }\r\n            $scope.rule = wrapper;\r\n            Parser.get({\r\n                id: $scope.rule['id']\r\n            }, function (data) {\r\n                //$scope.message = data;\r\n                if (data.status === '404') {\r\n                    try {\r\n                        //  delete    $scope.rule.id;\r\n                        $scope.fromRule();\r\n                        $edit_table.slideDown();\r\n                        $search_table.slideUp();\r\n                        upload_table.slideUp();\r\n                        list.slideUp();\r\n                        delete $scope.myFile;\r\n                        //$scope.$apply();\r\n                    } catch (e) {\r\n                        $scope.message = {\r\n                            status: '500',\r\n                            message: '数据解析出错,你检查你的数据文件是否是正确的解析规则内容!'\r\n                        };\r\n                    }\r\n                } else {\r\n                    $('#addModal').modal('show');\r\n                }\r\n\r\n            });\r\n        };\r\n\r\n        try {\r\n            reader.readAsText(file);\r\n        } catch (e) {\r\n            $scope.message = {\r\n                status: '500',\r\n                message: '数据解析出错,你检查你的数据文件是否正确!'\r\n            };\r\n\r\n        }\r\n\r\n\r\n    };\r\n    $scope.show = function (clazz, id) {\r\n        let edit = $('.hla-widget-add-table');\r\n        let search = $('.hla-widget-search-table');\r\n        let list = $('.hla-widget-data-table');\r\n        let upload_table = $('.hla-widget-upload-table');\r\n        switch (clazz) {\r\n            case 'upload':\r\n                delete $scope.message;\r\n                $scope.searchDataSourceForm = {};\r\n                edit.slideUp();\r\n                search.slideUp();\r\n                upload_table.slideDown();\r\n                break;\r\n\r\n            case 'add':\r\n                delete $scope.message;\r\n                $scope.rule = {\r\n                    name: '',\r\n                    sample: '',\r\n                    parser: {\r\n                        name: 'nothing'\r\n                    }\r\n                };\r\n                Util.resetFormValidateState($scope.add_form);\r\n                edit.slideToggle();\r\n                search.slideUp();\r\n                list.slideToggle();\r\n                upload_table.slideUp();\r\n                break;\r\n            case 'edit':\r\n                delete $scope.message;\r\n                Parser.get({\r\n                    id: id\r\n                }, function (data) {\r\n\r\n                    console.log(data.datasource);\r\n                    $scope.rule = data;\r\n                    $scope.fromRule();\r\n                });\r\n                Util.resetFormValidateState($scope.add_form);\r\n                edit.slideDown();\r\n                search.slideUp();\r\n                upload_table.slideUp();\r\n                list.slideUp();\r\n                break;\r\n            case 'copy':\r\n                delete $scope.message;\r\n                Parser.get({\r\n                    id: id\r\n                }, function (data) {\r\n                    $scope.rule = data;\r\n                    delete $scope.rule.id;\r\n                    $scope.rule.name = $scope.rule.name + '_copy';\r\n                    $scope.fromRule();\r\n                });\r\n                Util.resetFormValidateState($scope.add_form);\r\n                edit.slideDown();\r\n                search.slideUp();\r\n                upload_table.slideUp();\r\n                list.slideUp();\r\n                break;\r\n            case 'search':\r\n                delete $scope.message;\r\n                edit.slideUp();\r\n                search.slideToggle();\r\n                upload_table.slideUp();\r\n                list.slideDown();\r\n                $scope.page.search = {};\r\n                break;\r\n            default:\r\n                edit.slideUp();\r\n                search.slideUp();\r\n                upload_table.slideUp();\r\n                list.slideDown();\r\n        }\r\n    };\r\n    $scope.reload = function () {\r\n\r\n        $scope.list = Parser.get($scope.page);\r\n        $scope.all = Parser.query();\r\n        // $scope.show();\r\n\r\n    };\r\n\r\n    $scope.toRule = function () {\r\n        let filters = $scope.rule.parser.filter;\r\n        if ('delimit' == $scope.rule.parser.name) {\r\n            $scope.rule.parser.delimit = $scope.rule.parser.delimit.replace(/\\\\s/g, ' ').replace(/\\\\t/g, '\\t').replace(/\\\\n/g, '\\n');\r\n            if ($scope.rule.parser.fields && $scope.rule.parser.fields.length > 0) {\r\n                let ff = $scope.rule.parser.fields.split(',');\r\n                delete $scope.rule.parser.fields;\r\n                $scope.rule.parser.fields = ff\r\n            }\r\n        }\r\n        if ('delimitWithKeyMap' == $scope.rule.parser.name) {\r\n            $scope.rule.parser.delimit = $scope.rule.parser.delimit.replace(/\\\\s/g, ' ').replace(/\\\\t/g, '\\t').replace(/\\\\n/g, '\\n');\r\n            $scope.rule.parser.tab = $scope.rule.parser.tab.replace(/\\\\s/g, ' ').replace(/\\\\t/g, '\\t').replace(/\\\\n/g, '\\n');\r\n        }\r\n\r\n        if (filters) {\r\n            for (let i = 0; i < filters.length; i++) {\r\n                switch (filters[i].name) {\r\n                    case '':\r\n                        delete filters[i];\r\n                        break;\r\n                    case 'merger':\r\n                        if (filters[i].sep)\r\n                            filters[i].sep = filters[i].sep.replace(/\\\\s/g, ' ').replace(/\\\\t/g, '\\t').replace(/\\\\n/g, '\\n');\r\n\r\n                        break;\r\n                    case 'addFields':\r\n                    case 'mapping':\r\n                        let obj = {};\r\n\r\n                        for (let j = 0; j < filters[i].fields.length; j++) {\r\n                            obj[filters[i].fields[j][0]] = filters[i].fields[j][1]\r\n                        }\r\n\r\n                        filters[i].fields = obj;\r\n                        break;\r\n                    case 'redirect':\r\n                    case 'startWith':\r\n                    case 'endWith':\r\n                    case 'match':\r\n                    case 'scriptFilter':\r\n                    case 'contain':\r\n                        if (filters[i].cases) {\r\n                            let cases = filters[i].cases;\r\n\r\n                            for (let j = 0; j < cases.length; j++) {\r\n                                switch (cases[j].rule.name) {\r\n                                    case '':\r\n                                        delete cases[j];\r\n                                        break;\r\n                                    case 'merger':\r\n                                        if (cases[j].rule.sep)\r\n                                            cases[j].rule.sep = cases[j].rule.sep.replace(/\\\\s/g, ' ').replace(/\\\\t/g, '\\t').replace(/\\\\n/g, '\\n');\r\n\r\n                                        break;\r\n                                    case 'addFields':\r\n                                    case 'mapping':\r\n                                        obj = {};\r\n\r\n                                        for (let x = 0; x < cases[j].rule.fields.length; x++) {\r\n                                            obj[cases[j].rule.fields[x][0]] = cases[j].rule.fields[x][1]\r\n                                        }\r\n\r\n                                        cases[j].rule.fields = obj;\r\n                                        break;\r\n                                }\r\n                            }\r\n                            filters[i].cases = cases;\r\n                        }\r\n                        if (filters[i].default) {\r\n                            switch (filters[i].default.name) {\r\n                                case '':\r\n                                    delete filters[i].default;\r\n                                    break;\r\n                                case 'merger':\r\n                                    if (cases[j].rule.sep)\r\n                                        filters[i].default.sep = filters[i].default.sep.replace(/\\\\s/g, ' ').replace(/\\\\t/g, '\\t').replace(/\\\\n/g, '\\n');\r\n\r\n                                    break;\r\n                                case 'addFields':\r\n                                case 'mapping':\r\n                                    obj = {};\r\n\r\n                                    for (let x = 0; x < filters[i].default.fields.length; x++) {\r\n                                        obj[filters[i].default.fields[x][0]] = filters[i].default.fields[x][1]\r\n                                    }\r\n\r\n                                    filters[i].default.fields = obj;\r\n                                    break;\r\n\r\n                            }\r\n                        }\r\n\r\n                }\r\n\r\n            }\r\n            $scope.rule.parser.filter = filters;\r\n        }\r\n    };\r\n    $scope.fromRule = function () {\r\n        let filters = $scope.rule.parser.filter;\r\n        if ('delimit' == $scope.rule.parser.name) {\r\n            $scope.rule.parser.delimit = $scope.rule.parser.delimit.replace(/ /g, '\\\\s').replace(/\\t/g, '\\\\t').replace(/\\n/g, '\\\\n');\r\n\r\n            let ff = $scope.rule.parser.fields.reduce(function (first, second) {\r\n                return first + ',' + second\r\n            })\r\n            delete $scope.rule.parser.fields;\r\n            $scope.rule.parser.fields = ff\r\n        }\r\n        if ('delimitWithKeyMap' == $scope.rule.parser.name) {\r\n            $scope.rule.parser.delimit = $scope.rule.parser.delimit.replace(/ /g, '\\\\s').replace(/\\t/g, '\\\\t').replace(/\\n/g, '\\\\n');\r\n            $scope.rule.parser.tab = $scope.rule.parser.tab.replace(/ /g, '\\\\s').replace(/\\t/g, '\\\\t').replace(/\\n/g, '\\\\n');\r\n        }\r\n        if (filters) {\r\n            for (let i = 0; i < filters.length; i++) {\r\n                switch (filters[i].name) {\r\n                    case 'merger':\r\n                        if (filters[i].sep)\r\n                            filters[i].sep = filters[i].sep.replace(/ /g, '\\\\s').replace(/\\t/g, '\\\\t').replace(/\\n/g, '\\\\n');\r\n\r\n                        break;\r\n                    case 'addFields':\r\n                    case 'mapping':\r\n                        let obj = [];\r\n\r\n                        for (let j in filters[i].fields) {\r\n                            if (filters[i].fields.hasOwnProperty(j)) {\r\n                                obj.push([j, filters[i].fields[j]]);\r\n                            }\r\n                        }\r\n\r\n                        filters[i].fields = obj;\r\n                        break;\r\n                    case 'redirect':\r\n                    case 'startWith':\r\n                    case 'endWith':\r\n                    case 'match':\r\n                    case 'scriptFilter':\r\n                    case 'contain':\r\n                        if (filters[i].cases) {\r\n                            let cases = filters[i].cases;\r\n\r\n                            for (let j = 0; j < cases.length; j++) {\r\n                                switch (cases[j].rule.name) {\r\n                                    case 'merger':\r\n                                        cases[j].rule.sep = cases[j].rule.sep.replace(/ /g, '\\\\s').replace(/\\t/g, '\\\\t').replace(/\\n/g, '\\\\n');\r\n\r\n                                        break;\r\n                                    case 'addFields':\r\n                                    case 'mapping':\r\n                                        obj = [];\r\n                                        for (let x in cases[j].rule.fields) {\r\n                                            if (cases[j].rule.fields.hasOwnProperty(x)) {\r\n                                                obj.push([x, cases[j].rule.fields[x]]);\r\n                                            }\r\n                                        }\r\n                                        cases[j].rule.fields = obj;\r\n\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                        if (filters[i].default) {\r\n                            switch (filters[i].default.name) {\r\n                                case 'merger':\r\n                                    cases[j].rule.sep = cases[j].rule.sep.replace(/ /g, '\\\\s').replace(/\\t/g, '\\\\t').replace(/\\n/g, '\\\\n');\r\n\r\n                                    break;\r\n                                case 'addFields':\r\n                                case 'mapping':\r\n                                    obj = [];\r\n\r\n                                    for (let x in filters[i].default.fields) {\r\n                                        if (filters[i].default.fields.hasOwnProperty(x)) {\r\n                                            obj.push([x, filters[i].default.fields[x]]);\r\n                                        }\r\n                                    }\r\n                                    filters[i].default.fields = obj;\r\n\r\n                            }\r\n\r\n                        }\r\n\r\n\r\n                        break;\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n    };\r\n\r\n    //添加规则\r\n    $scope.saveRule = function (form) {\r\n\r\n        if (!(form.$valid && (!$scope.rule.parser.fields || $scope.rule.parser.fields.length > 0))) {\r\n            return false;\r\n        }\r\n        $scope.toRule();\r\n        if (!$scope.rule.properties) $scope.rule.properties = [];\r\n        for (let i = 0; i < $scope.rule.properties.length; i++) {\r\n            if ($scope.rule.properties[i].hasOwnProperty('key')) {\r\n                if ($scope.rule.properties[i].type == 'list') {\r\n                    $scope.rule.properties[i].type = 'list[' + $scope.rule.properties[i].subtype + ']';\r\n                    delete $scope.rule.properties[i].subtype;\r\n                }\r\n            }\r\n        }\r\n        /* Parser.get({id: $scope.rule['id']}, function (data) {\r\n           $scope.message = data;\r\n           if($scope.message.status == '404'){\r\n             console.log($scope.rule);\r\n             Parser.save($scope.rule, function (data) {\r\n               $scope.message = data;\r\n               if ($scope.message.status == '200') {\r\n                 $scope.reload();\r\n                 $scope.show();\r\n               }\r\n             });\r\n           }else {\r\n             $('#addModal').modal('show');\r\n           }\r\n\r\n         });*/\r\n\r\n        Parser.save($scope.rule, function (data) {\r\n            console.log(data);\r\n            $scope.message = data;\r\n            if ($scope.message.status == '200') {\r\n                $scope.reload();\r\n                $scope.show();\r\n            }\r\n        });\r\n\r\n    };\r\n    $scope.saveOrEdit = function (clazz) {\r\n        let $edit_table = $('.hla-widget-add-table');\r\n        let $search_table = $('.hla-widget-search-table');\r\n        let upload_table = $('.hla-widget-upload-table');\r\n        let list = $('.hla-widget-data-table');\r\n        let file = $scope.myFile;\r\n        let reader = new FileReader();\r\n        switch (clazz) {\r\n            case 'edit':\r\n                delete  $scope.message;\r\n                try {\r\n                    $scope.fromRule();\r\n                    $edit_table.slideDown();\r\n                    $search_table.slideUp();\r\n                    upload_table.slideUp();\r\n                    list.slideUp();\r\n                    delete $scope.myFile;\r\n                    //$scope.$apply();\r\n                    $('#addModal').modal('hide');\r\n                } catch (e) {\r\n                    $scope.message = {\r\n                        status: '500',\r\n                        message: '数据解析出错,你检查你的数据文件是否是正确的解析规则内容!'\r\n                    };\r\n                }\r\n                break;\r\n\r\n            case 'save':\r\n                delete  $scope.message;\r\n                delete    $scope.rule.id;\r\n                $('#addModal').modal('hide');\r\n                try {\r\n                    $scope.fromRule();\r\n                    $edit_table.slideDown();\r\n                    $search_table.slideUp();\r\n                    upload_table.slideUp();\r\n                    list.slideUp();\r\n                    delete $scope.myFile;\r\n                    //$scope.$apply();\r\n                } catch (e) {\r\n                    $scope.message = {\r\n                        status: '500',\r\n                        message: '数据解析出错,你检查你的数据文件是否是正确的解析规则内容!'\r\n                    };\r\n                }\r\n        }\r\n    };\r\n\r\n    $scope.changeType = function (index) {\r\n        switch ($scope.rule.properties[index].type) {\r\n            case 'list':\r\n                break;\r\n            default:\r\n                delete $scope.rule.properties[index].subtype;\r\n        }\r\n\r\n    };\r\n\r\n    $scope.delete = function (id) {\r\n        $scope.delete_id = id;\r\n        $('#confirmModal').modal('show');\r\n    };\r\n    //删除确定\r\n    $scope.confirm_yes = function () {\r\n\r\n        Parser.delete({id: $scope.delete_id}, function (data) {\r\n            $scope.message = data;\r\n            $('#confirmModal').modal('hide');\r\n            $scope.reload();\r\n        });\r\n\r\n\r\n    };\r\n    $('#confirmModal').find('.op_yes').off().click(function () {\r\n        $scope.confirm_yes();\r\n    });\r\n\r\n    function compare(first, second) {\r\n        let reg = /^([a-zA-Z]+)?(\\d+)$/;\r\n        if (reg.test(first) && reg.test(second)) {\r\n            let firstRT = reg.exec(first);\r\n            let secondRT = reg.exec(second);\r\n            if (firstRT[1] == secondRT[1]) {\r\n                return firstRT[2] - secondRT[2];\r\n            } else {\r\n                return first - second;\r\n            }\r\n        } else {\r\n            return first - second;\r\n        }\r\n    }\r\n\r\n\r\n    $scope.initFields = function (callback) {\r\n        if ($scope.rule.parser.name == 'delimit' && (!$scope.rule.parser.fields || $scope.rule.parser.fields.length == 0)) {\r\n            if (!$scope.rule.parser.fields) {\r\n                $scope.rule.parser.fields = [];\r\n\r\n            }\r\n            $scope.previewFields = [];\r\n            if ($scope.rule.parser.fields.length == 0) {\r\n                if ($scope.rule.sample && $scope.rule.sample.length > 0) {\r\n                    let sample = $scope.rule.sample.split('#next#');\r\n                    $scope.toRule();\r\n                    Parser.preview($scope.rule, function (data) {\r\n                        for (let i = 0; i < data.length; i++) {\r\n                            for (let k in data[i].toJSON()) {\r\n                                let rt = $.inArray(k, $scope.rule.parser.fields);\r\n\r\n                                if (rt < 0) {\r\n                                    $scope.rule.parser.fields.push(k);\r\n                                    $scope.previewFields.push(k);\r\n                                }\r\n\r\n                            }\r\n                        }\r\n                        $scope.rule.parser.fields = $scope.rule.parser.fields.sort(compare);\r\n                        $scope.fromRule();\r\n                        if (callback)\r\n                            callback();\r\n                    });\r\n                } else {\r\n                    if (callback)\r\n                        callback();\r\n                }\r\n            }\r\n        } else {\r\n            if ($scope.rule.sample && $scope.rule.sample.length > 0) {\r\n                let sample = $scope.rule.sample.split('#next#');\r\n                $scope.toRule();\r\n                Parser.preview($scope.rule, function (data) {\r\n                    for (let i = 0; i < data.length; i++) {\r\n                        for (let k in data[i].toJSON()) {\r\n                            let rt = $.inArray(k, $scope.previewFields);\r\n                            if (rt < 0) {\r\n                                $scope.previewFields.push(k);\r\n                            }\r\n\r\n                        }\r\n                    }\r\n                    $scope.fromRule();\r\n                    if (callback)\r\n                        callback();\r\n                });\r\n            } else {\r\n                if ($scope.rule.properties) {\r\n                    $scope.rule.properties.forEach(function (data) {\r\n                        $scope.previewFields.push(data.key);\r\n                        let subtype = data.type.match(/list\\[(.*)]/);\r\n                        if (subtype && subtype.length >= 2) {\r\n                            data.type = 'list';\r\n                            data.subtype = subtype[1];\r\n                        }\r\n                    });\r\n                } else {\r\n                    $scope.rule.properties = []\r\n                }\r\n\r\n                if (callback)\r\n                    callback();\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n    $scope.addDelimitField = function () {\r\n        $scope.initFields();\r\n    };\r\n\r\n    $scope.removeDelimitField = function (index) {\r\n        $scope.rule.parser.fields.splice(index, 1);\r\n    };\r\n    $scope.removeFilter = function (index) {\r\n        $scope.rule.parser.filter.splice(index, 1);\r\n    };\r\n    $scope.addFilter = function () {\r\n\r\n        $scope.initFields(function () {\r\n            if (!$scope.rule.parser.filter) {\r\n                $scope.rule.parser.filter = []\r\n            }\r\n            $scope.rule.parser.filter.push({\r\n                name: 'addFields',\r\n                fields: [['', '']]\r\n            })\r\n        });\r\n\r\n    };\r\n\r\n    $scope.ruleChange = function (index) {\r\n        reParserChange($scope.rule.parser.filter[index]);\r\n    };\r\n\r\n    function reParserChange(reParser) {\r\n        switch (reParser.name) {\r\n            case 'addFields':\r\n            case 'mapping':\r\n                reParser.fields = [['', '']];\r\n                break;\r\n            case 'removeFields':\r\n                reParser.fields = [''];\r\n                break;\r\n            case 'addTags':\r\n            case 'removeTags':\r\n                reParser.fields = [''];\r\n                break;\r\n            case 'merger':\r\n                reParser.fields = ['', ''];\r\n                break;\r\n            case 'fieldCut':\r\n                break;\r\n            case 'reParser':\r\n                break;\r\n            case 'script':\r\n                break;\r\n            case 'scriptFilter':\r\n            case 'redirect':\r\n            case 'startWith':\r\n            case 'endWith':\r\n            case 'match':\r\n            case 'contain':\r\n                if (!reParser.cases) {\r\n                    reParser.cases = [{\r\n                        name: 'case',\r\n                        rule: {\r\n                            name: 'addFields',\r\n                            fields: [['', '']]\r\n                        }\r\n                    }]\r\n                }\r\n\r\n                break;\r\n            default :\r\n                delete  reParser.fields;\r\n        }\r\n\r\n    }\r\n\r\n    $scope.caseDefaultChange = function (index) {\r\n        let reParser = $scope.rule.parser.filter[index].default;\r\n        reParserChange(reParser);\r\n\r\n\r\n    };\r\n\r\n    $scope.addFilterTuple = function (index) {\r\n\r\n        let fields = $scope.rule.parser.filter[index].fields;\r\n        if (!fields) {\r\n            $scope.rule.parser.filter[index].fields = fields = []\r\n        }\r\n        fields.push(['', '']);\r\n    };\r\n    $scope.removeFilterTuple = function (index, key) {\r\n        $scope.rule.parser.filter[index].fields.splice(key, 1);\r\n    };\r\n    $scope.addFilterOne = function (index) {\r\n        if (!$scope.rule.parser.filter[index].fields) {\r\n            $scope.rule.parser.filter[index].fields = []\r\n        }\r\n        $scope.rule.parser.filter[index].fields.push('')\r\n    };\r\n    $scope.removeFilterOne = function (parent, index) {\r\n        $scope.rule.parser.filter[parent].fields.splice(index, 1);\r\n    };\r\n\r\n\r\n    $scope.addFilterDefaultTuple = function (index) {\r\n        let fields = $scope.rule.parser.filter[index].default.fields;\r\n        if (!fields) {\r\n            $scope.rule.parser.filter[index].default.fields = fields = []\r\n        }\r\n        fields.push(['', '']);\r\n    };\r\n    $scope.removeFilterDefaultTuple = function (index, key) {\r\n        $scope.rule.parser.filter[index].default.fields.splice(key, 1);\r\n    };\r\n    $scope.addFilterDefaultOne = function (index) {\r\n        if (!$scope.rule.parser.filter[index].default.fields) {\r\n            $scope.rule.parser.filter[index].default.fields = []\r\n        }\r\n        $scope.rule.parser.filter[index].default.fields.push('')\r\n    };\r\n    $scope.removeFilterDefaultOne = function (parent, index) {\r\n        $scope.rule.parser.filter[parent].default.fields.splice(index, 1);\r\n    };\r\n\r\n\r\n    $scope.addCase = function (index) {\r\n        if (!$scope.rule.parser.filter[index].cases) {\r\n            $scope.rule.parser.filter[index].cases = []\r\n        }\r\n        $scope.rule.parser.filter[index].cases.push({\r\n            name: 'case',\r\n            rule: {\r\n                name: 'addFields',\r\n                fields: [['', '']]\r\n            }\r\n        })\r\n    };\r\n    $scope.removeCase = function (findex, index) {\r\n        $scope.rule.parser.filter[findex].cases.splice(index, 1);\r\n    };\r\n    $scope.caseChange = function (fIndex, index) {\r\n        reParserChange($scope.rule.parser.filter[fIndex].cases[index].rule);\r\n    };\r\n    $scope.addCaseTuple = function (fIndex, index) {\r\n\r\n        let fields = $scope.rule.parser.filter[fIndex].cases[index].rule.fields;\r\n        if (!fields || !angular.isArray(fields)) {\r\n            $scope.rule.parser.filter[fIndex].cases[index].rule.fields = fields = []\r\n        }\r\n        fields.push(['', '']);\r\n    };\r\n    $scope.removeCaseTuple = function (fIndex, index, key) {\r\n        $scope.rule.parser.filter[fIndex].cases[index].rule.fields.splice(key, 1);\r\n    };\r\n    $scope.addCaseOne = function (fIndex, index) {\r\n        if (!$scope.rule.parser.filter[fIndex].cases[index].rule.fields) {\r\n            $scope.rule.parser.filter[fIndex].cases[index].rule.fields = []\r\n        }\r\n        $scope.rule.parser.filter[fIndex].cases[index].rule.fields.push('')\r\n    };\r\n    $scope.removeCaseOne = function (fIndex, cindex, index) {\r\n        $scope.rule.parser.filter[fIndex].cases[cindex].rule.fields.splice(index, 1);\r\n    };\r\n\r\n    $scope.resetPreview = function () {\r\n        $scope.rule.properties = []\r\n    };\r\n    $scope.preview = function (form) {\r\n\r\n        if (!form.$submitted) {\r\n            form.$submitted = true;\r\n        }\r\n\r\n        if (!(form.$valid && (!$scope.rule.parser.fields || $scope.rule.parser.fields.length > 0))) {\r\n            return false;\r\n        }\r\n\r\n\r\n        //  let sample = $scope.rule.sample.split('#next#');\r\n\r\n        $scope.toRule();\r\n        Parser.properties($scope.rule, function (data) {\r\n            if (!data) {\r\n                console.log(data);\r\n            } else {\r\n                let properties = data[0];\r\n                console.log(properties);\r\n                $scope.rule.properties = [];\r\n\r\n                for (let i in properties) {\r\n                    if (properties[i].hasOwnProperty('key')) {\r\n                        $scope.rule.properties.push(properties[i]);\r\n                    }\r\n\r\n                }\r\n\r\n                // properties.foreach((key, value) => {\r\n                //     console.log(key, value);\r\n                //     $scope.rule.properties.push(value);\r\n                // });\r\n\r\n                for (let i = 0; i < $scope.rule.properties.length; i++) {\r\n                    if ($scope.rule.properties[i].hasOwnProperty('key')) {\r\n                        let subtype = $scope.rule.properties[i].type.match(/list\\[(.*)]/);\r\n                        if (subtype && subtype.length >= 2) {\r\n                            $scope.rule.properties[i].type = 'list';\r\n                            $scope.rule.properties[i].subtype = subtype[1];\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n                $scope.datas = data[1];\r\n            }\r\n            $scope.fromRule();\r\n\r\n            $('#log_property_list').show();\r\n            //$('#op_save_log_rule_button').show()\r\n        });\r\n\r\n    };\r\n\r\n    /**\r\n     * 构造 字段属性\r\n     */\r\n    $scope.addProperty = function () {\r\n        $scope.rule.properties.push({\r\n            key: '',\r\n            name: '',\r\n            type: 'object',\r\n            sample: ''\r\n        })\r\n    };\r\n\r\n    /**\r\n     * 删除字段属性\r\n     * @param index\r\n     */\r\n    $scope.deleteProperty = function (index) {\r\n        $scope.rule.properties.splice(index, 1);\r\n    };\r\n\r\n    /**\r\n     * 刷新字段属性列表的index属性\r\n     * @param property_index 删除的字段属性index\r\n     */\r\n    $scope.properties_index_refresh = function (property_index) {\r\n        let properties_count = $('#properties').children('div').length;\r\n        for (let index = property_index + 1; index <= properties_count; index++) {\r\n            $.each($('#properties').find('input[name^=\\'properties[' + index + ']\\'],select[name^=\\'properties[' + index + ']\\']'), function (key, value) {\r\n                if (key == 0) $(value).closest('.op_event_relate').attr('property_index', index - 1);\r\n                $(value).attr('name', value.name.replace(index, index - 1));\r\n            });\r\n        }\r\n    };\r\n\r\n    $scope.log_property_list_clean = function () {\r\n        $('#properties').children().remove();\r\n        $('#log_property_list').hide();\r\n    };\r\n    //下载配置文件\r\n    $scope.downloadFile = function (sqlItemId) {\r\n        Parser.download({id: sqlItemId}, function (response) {\r\n            let fileName = '解析规则';\r\n            fileName = decodeURI(fileName);\r\n            let url = URL.createObjectURL(new Blob([response.data]));\r\n            let a = document.createElement('a');\r\n            document.body.appendChild(a); //此处增加了将创建的添加到body当中\r\n            a.href = url;\r\n            a.download = fileName + '-' + sqlItemId + '.json';\r\n            a.target = '_blank';\r\n            a.click();\r\n            a.remove(); //将a标签移除\r\n        }, function (response) {\r\n        });\r\n    }\r\n\r\n});\r\n"]}