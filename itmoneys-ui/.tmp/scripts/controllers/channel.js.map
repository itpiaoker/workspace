{"version":3,"sources":["controllers/channel.js"],"names":["app","controller","$scope","$rootScope","$timeout","$location","Channel","Modeling","Analyzer","Util","DataSource","Metrics","Collector","Parser","Writer","$path","path","bind","encodings","$confirmModal","$","countMessage","d3_format","d3","time","format","days","defaultChannel","type","name","properties","timeout_ms","polling_ms","writers","channel","collectors","query","datasources","byType","defaultChannels","channels","resolvers","resolverList","analyzers","datasource","changeDataSourceType","id","get","ds","connectTest","valid","workerId","collector","url","cluster","angular","element","html","opt","rt","message","error","content","options","chart","height","margin","top","right","bottom","left","x","d","y","useInteractiveGuideline","dispatch","stateChange","e","console","log","changeState","tooltipShow","tooltipHide","xAxis","axisLabel","tickFormat","Date","yAxis","axisLabelDistance","callback","title","enable","text","subtitle","css","caption","usableCheck","data","copy","setForSave","check","metric","interval","altInputFormats","popup1","opened","open1","popup2","open2","getWriterNameById","writes_name","forEach","w","metricsOne","startTime","endTime","channelTypeName","config","from","to","wrapper","metrics","info","xName","parse","read_success","concat","operation_success","operation_fail","operation_ignore","write_success","counts","count","countMsg","metric_type","status","date","lasttime","metricType","metricPhase","push","metricId","indexOf","write_key","split","key","read","success","operation","fail","ignore","writes","length","values","now","getTime","dsId","udMetrics","resetForm","resetFormValidateState","ds_form","save","formValid","dataForm","reload","show","slideUp","uploadFile","$edit_table","$search_table","upload_table","file","myFile","reader","FileReader","onload","fromJson","result","list","filter","collectorId","datatime","setWriterForViewer","slideDown","$apply","readAsText","PropertiesWithType","reg","item","v","test","eval","clazz","metric_table","slideToggle","parser","collector_info","receive_time","operate","delete","deleteId","modal","confirm_yes","find","off","click","page","pages","map","addHostPort","listens","hostPorts","removeHostPort","index","splice","addHostEncoding","removeHostEncoding","$resolved","tempWriters","Array","i","j","writer","getIndex","undefined","changeDBType","protocol","port","downloadFile","itemId","download","response","fileName","decodeURI","URL","createObjectURL","Blob","a","document","createElement","body","appendChild","href","target","remove"],"mappings":"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","file":"channel.js","sourcesContent":["'use strict';\r\n\r\napp.controller('ChannelController', function ($scope, $rootScope, $timeout, $location, Channel, Modeling, Analyzer, Util, DataSource, Metrics, Collector, Parser, Writer) {\r\n    $rootScope.$path = $location.path.bind($location);\r\n    $scope.encodings = ['UTF-8', 'GBK', 'GB18030', 'GB2312', 'BIG5', 'UNICODE', 'ASCII', 'ISO-8859-1'];\r\n    const $confirmModal = $('#confirmModal');\r\n    $scope.countMessage = '采集的总量：未知';\r\n    const d3_format = d3.time.format('%Y-%m-%d %H:%M:%S');\r\n    let days = 1 * 60 * 60 * 1000;\r\n\r\n    let defaultChannel = {\r\n        type: {\r\n            name: \"parser\"\r\n        },\r\n        properties: {\r\n            timeout_ms: 100,\r\n            polling_ms: 1000\r\n        },\r\n        writers: []\r\n    };\r\n    $scope.channel = defaultChannel;\r\n    //采集器\r\n    $scope.collectors = Collector.query();\r\n    //数据源\r\n    $scope.datasources = DataSource.byType({type: \"default\"});\r\n\r\n    let defaultChannels = DataSource.byType({type: \"channel\"});\r\n    //数据通道\r\n    $scope.channels = defaultChannels;\r\n\r\n    //解析规则\r\n    $scope.resolvers = Parser.query();\r\n    $scope.resolverList = $scope.resolvers;\r\n    //分析规则\r\n    $scope.analyzers = Analyzer.query();\r\n\r\n    //数据源实体\r\n    $scope.datasource = {};\r\n    //获得数据源详情\r\n    $scope.changeDataSourceType = function (id) {\r\n        DataSource.get({\r\n            id: id\r\n        }, function (ds) {\r\n            $scope.datasource = ds;\r\n        });\r\n    };\r\n\r\n    $scope.connectTest = function (valid) {\r\n        var workerId = $scope.channel.collector;\r\n        var url = $scope.channel.type.cluster;\r\n        if (valid) {\r\n            angular.element(\"#connect_test\").html('<i class=\"fa fa-spinner fa-spin\"></i>');\r\n            Modeling.connectTest({opt: 'check', workerId: workerId, url: url}, function (rt) {\r\n                $scope.message = rt;\r\n                angular.element(\"#connect_test\").html('测试连接');\r\n            }, function (error) {\r\n                let content = \"Connect to server has timed out, please try again later.\";\r\n                $scope.message = {\r\n                    message: content\r\n                };\r\n                angular.element(\"#connect_test\").html('测试连接');\r\n            });\r\n        }\r\n    };\r\n\r\n    //数据存储\r\n    $scope.writers = Writer.query();\r\n\r\n    $scope.options = {\r\n        chart: {\r\n            type: 'lineChart',\r\n            height: 450,\r\n            margin: {\r\n                top: 20,\r\n                right: 20,\r\n                bottom: 40,\r\n                left: 55\r\n            },\r\n            x: function (d) {\r\n                return d.x;\r\n            },\r\n            y: function (d) {\r\n                return d.y;\r\n            },\r\n            useInteractiveGuideline: true,\r\n            dispatch: {\r\n                stateChange: function (e) {\r\n                    console.log('stateChange');\r\n                },\r\n                changeState: function (e) {\r\n                    console.log('changeState');\r\n                },\r\n                tooltipShow: function (e) {\r\n                    console.log('tooltipShow');\r\n                },\r\n                tooltipHide: function (e) {\r\n                    console.log('tooltipHide');\r\n                }\r\n            },\r\n            xAxis: {\r\n                axisLabel: '时间',\r\n                tickFormat: function (d) {\r\n                    return d3.time.format('%d日%H:%M:%S')(new Date(d))\r\n                }\r\n            },\r\n            yAxis: {\r\n                axisLabel: '条数/秒',\r\n                tickFormat: function (d) {\r\n                    return d;\r\n                },\r\n                axisLabelDistance: -10\r\n            },\r\n            callback: function (chart) {\r\n                console.log('!!! lineChart callback !!!');\r\n            }\r\n        },\r\n        title: {\r\n            enable: true,\r\n            text: '采集进度'\r\n        },\r\n        subtitle: {\r\n            enable: true,\r\n            text: '采集时间范围',\r\n            css: {\r\n                'text-align': 'center',\r\n                'margin': '10px 13px 0px 7px'\r\n            }\r\n        },\r\n        caption: {\r\n            html: ' ',\r\n            enable: true,\r\n            css: {\r\n                'text-align': 'justify',\r\n                'margin': '10px 13px 0px 7px'\r\n            }\r\n        }\r\n    };\r\n\r\n    $scope.usableCheck = function () {\r\n        let data = angular.copy($scope.channel);\r\n        data.writers = setForSave(data.writers);\r\n        Channel.check(data, function (rt) {\r\n            $scope.rt = rt;\r\n        });\r\n    };\r\n\r\n\r\n    $scope.metric = {\r\n        interval: 5,\r\n        format: 'yyyy-MM-dd HH:mm:ss',\r\n        altInputFormats: ['yyyy/M!/d!'],\r\n        popup1: {\r\n            opened: false\r\n        },\r\n        open1: function () {\r\n            this.popup1.opened = true;\r\n        },\r\n        popup2: {\r\n            opened: false\r\n        },\r\n        open2: function () {\r\n            this.popup2.opened = true;\r\n        }\r\n    };\r\n\r\n    function getWriterNameById(id) {\r\n        var writes_name = {}\r\n        $scope.writers.forEach(function (w) {\r\n            writes_name[w.id] = w.name\r\n        });\r\n        if (writes_name[id]) {\r\n            return writes_name[id]\r\n        } else {\r\n            return id\r\n        }\r\n    }\r\n\r\n    function metricsOne(id, startTime, endTime) {\r\n\r\n        $scope.data = [];\r\n        var channelTypeName = '';\r\n        if ($scope.channel.type.name == 'parser') channelTypeName = '解析'\r\n        if ($scope.channel.type.name == 'analyzer') channelTypeName = '分析'\r\n\r\n        Channel.get({id: id}, function (config) {\r\n\r\n            $scope.options.title.text = config.name;\r\n\r\n            $scope.options.subtitle.html = '从【' + startTime + '】到 【' + endTime + '】';\r\n\r\n            Metrics.query({\r\n                collector: config.collector,\r\n                id: config.id,\r\n                from: startTime,\r\n                to: endTime,\r\n                interval: $scope.metric.interval\r\n            }, function (wrapper) {\r\n                var metrics = wrapper.info\r\n                var xName = [{x: d3.time.format('%Y-%m-%d %H:%M:%S').parse(startTime)}, {x: d3.time.format('%Y-%m-%d %H:%M:%S').parse(endTime)}];\r\n                let read_success = xName.concat([]);\r\n                let operation_success = xName.concat([]);\r\n                let operation_fail = xName.concat([]);\r\n                let operation_ignore = xName.concat([]);\r\n                let write_success = {};\r\n                let counts = [];\r\n                let count = 0;\r\n                var countMsg = {\r\n                    \"read\": {\r\n                        \"success\": 0,\r\n                        \"fail\": 0,\r\n                        \"ignore\": 0\r\n                    },\r\n                    \"operation\": {\r\n                        \"success\": 0,\r\n                        \"fail\": 0,\r\n                        \"ignore\": 0\r\n                    },\r\n                    \"writes\": {}\r\n                }\r\n                var metric_type = '1-minute rate'\r\n                if (!metrics.status) {\r\n                    /*nvd3 bug 时间必须正序加载*/\r\n                    metrics/*.reverse()*/.forEach(function (metric) {\r\n                        let date = d3.time.format('%Y-%m-%d %H:%M:%S').parse(metric.lasttime);\r\n                        // console.log(date);\r\n                        /*let date = new Date(now.getTime()-3600000 - i * 1000);\r\n\r\n                         console.log(dat1);\r\n                         console.log(2);\r\n                         console.log(date);\r\n                         i++;*/\r\n                        if (metric.metricType == \"SUCCESS\" && metric.metricPhase == \"READ\") {\r\n                            read_success.push({\r\n                                x: date,\r\n                                y: metric.metric[metric_type]\r\n                            });\r\n                            // let _count = metric.metric['count'];\r\n                        }\r\n\r\n                        if (metric.metricType == \"SUCCESS\" && metric.metricPhase == \"OPERATION\") {\r\n                            operation_success.push({\r\n                                x: date,\r\n                                y: metric.metric[metric_type]\r\n                            });\r\n                        }\r\n                        if (metric.metricType == \"FAIL\" && metric.metricPhase == \"OPERATION\") {\r\n                            operation_fail.push({\r\n                                x: date,\r\n                                y: metric.metric[metric_type]\r\n                            });\r\n                        }\r\n                        if (metric.metricType == \"IGNORE\" && metric.metricPhase == \"OPERATION\") {\r\n                            operation_ignore.push({\r\n                                x: date,\r\n                                y: metric.metric[metric_type]\r\n                            });\r\n                        }\r\n                        if (metric.metricType == \"SUCCESS\" && metric.metricPhase == \"WRITE\" && metric.metricId.indexOf(\"forward\") == -1) {\r\n                            var write_key = getWriterNameById(metric.metricId.split(\"@\")[0]);\r\n                            if (!write_success[write_key]) {\r\n                                write_success[write_key] = xName.concat([]);\r\n                            }\r\n                            write_success[write_key].push({\r\n                                x: date,\r\n                                y: metric.metric[metric_type]\r\n                            });\r\n                        }\r\n\r\n                        /* counts.push({\r\n                         x: metric.datetime,\r\n                         y: Math.log(Number(metric.metric['count']))\r\n                         });*/\r\n\r\n                    });\r\n                    /*$scope.options.caption.html = '<p><b></b> 已经采集的总量：<span style='text-decoration: underline;'><b>' + count + '</b></span>条';*/\r\n\r\n                    for (var key in wrapper.count) {\r\n                        if (key.indexOf(\"read_success\") != -1) {\r\n                            countMsg.read.success = wrapper.count[key];\r\n                        }\r\n                        else if (key.indexOf(\"operation_success\") != -1) {\r\n                            countMsg.operation.success = wrapper.count[key];\r\n                        }\r\n                        else if (key.indexOf(\"operation_fail\") != -1) {\r\n                            countMsg.operation.fail = wrapper.count[key];\r\n                        }\r\n                        else if (key.indexOf(\"operation_ignore\") != -1) {\r\n                            countMsg.operation.ignore = wrapper.count[key];\r\n                        }\r\n                        else if (key.indexOf(\"write_success\") != -1 && key.indexOf(\"forward\") == -1) {\r\n                            var write_key = getWriterNameById(key.split(\"@\")[0]);\r\n                            if (countMsg.writes[write_key]) {\r\n                                countMsg.writes[write_key][\"success\"] = wrapper.count[key];\r\n                            } else {\r\n                                countMsg.writes[write_key] = {\r\n                                    \"success\": wrapper.count[key]\r\n                                };\r\n                            }\r\n                        }\r\n                        else if (key.indexOf(\"write_fail\") != -1 && key.indexOf(\"forward\") == -1) {\r\n                            var write_key = getWriterNameById(key.split(\"@\")[0]);\r\n                            if (countMsg.writes[write_key]) {\r\n                                countMsg.writes[write_key][\"fail\"] = wrapper.count[key];\r\n                            } else {\r\n                                countMsg.writes[write_key] = {\r\n                                    \"fail\": wrapper.count[key]\r\n                                };\r\n                            }\r\n                        }\r\n                    }\r\n                    $scope.countMessage = countMsg;\r\n\r\n                    // $scope.countMessage = wrapper.count\r\n                    if (read_success.length > 0) {\r\n                        $scope.data.push({\r\n                            key: '读取成功',\r\n                            values: read_success\r\n                        });\r\n                        $scope.data.push({\r\n                            key: channelTypeName + '成功',\r\n                            values: operation_success\r\n                        });\r\n                        $scope.data.push({\r\n                            key: channelTypeName + '失败',\r\n                            values: operation_fail\r\n                        });\r\n                        $scope.data.push({\r\n                            key: channelTypeName + '忽略',\r\n                            values: operation_ignore\r\n                        });\r\n                        for (key in write_success) {\r\n                            $scope.data.push({\r\n                                key: key + '-输出成功',\r\n                                values: write_success[key]\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    $scope.metrics = function (id) {\r\n        let now = new Date();\r\n        let startTime = d3_format(new Date(now.getTime() - days));\r\n        let endTime = d3_format(now);\r\n        $scope.metric.startTime = startTime;\r\n        $scope.metric.endTime = endTime;\r\n        $scope.metric.dsId = id;\r\n        metricsOne(id, startTime, endTime);\r\n    };\r\n\r\n    $scope.udMetrics = function () {\r\n        let startTime = d3_format.parse($scope.metric.startTime);\r\n        let endTime = d3_format.parse($scope.metric.endTime);\r\n        if (startTime > endTime) {\r\n            $scope.options.subtitle.html = '<span style=\\'color:rgba(255,0,0,0)\\'>时间选择错误：开始时间晚于结束时间！</span>';\r\n            $scope.message = {\r\n                message: \"时间选择错误：开始时间晚于结束时间！\"\r\n            }\r\n            return;\r\n        } else if ((startTime.getTime() + 1000 * 60 * 60 * 24 * 7) < endTime.getTime()) {\r\n            $scope.options.subtitle.html = '<span style=\\'color:rgba(255,0,0,0)\\'>时间选择错误：只提供7日内计量信息查询！</span>';\r\n            $scope.message = {\r\n                message: \"时间选择错误：只提供7日内计量信息查询\"\r\n            }\r\n            return;\r\n        } else {\r\n            $scope.message = \"\"\r\n        }\r\n        metricsOne($scope.metric.dsId, $scope.metric.startTime, $scope.metric.endTime);\r\n    };\r\n\r\n    //重置表单\r\n    $scope.resetForm = function () {\r\n        $scope.channel = defaultChannel;\r\n        Util.resetFormValidateState($scope.ds_form);\r\n    };\r\n    $scope.resetForm();\r\n    //保存\r\n    $scope.save = function (formValid) {\r\n        if (!formValid) {\r\n            return false;\r\n        }\r\n        let dataForm = angular.copy($scope.channel);\r\n        dataForm.writers = setForSave(dataForm.writers);\r\n        //console.log('dataForm='+JSON.stringify(dataForm));\r\n        Channel.save(dataForm, function (rt) {\r\n            $scope.message = rt;\r\n            if ($scope.message.status == '200') {\r\n                $scope.reload();\r\n                $scope.show();\r\n                $('.hla-widget-add-table').slideUp();\r\n            }\r\n        });\r\n    };\r\n\r\n\r\n    $scope.uploadFile = function () {\r\n        delete $scope.message;\r\n        let $edit_table = $('.hla-widget-add-table');\r\n        let $search_table = $('.hla-widget-search-table');\r\n        let upload_table = $('.hla-widget-upload-table');\r\n        let file = $scope.myFile;\r\n        let reader = new FileReader();\r\n        reader.onload = (function (file) {\r\n            return function (e) {\r\n                $scope.channel = angular.fromJson(this.result);\r\n                delete $scope.channel.id;//删除数据源id\r\n                let list = $scope.collectors.filter(function (collector) {\r\n                    return collector.id == $scope.channel.collectorId;\r\n\r\n                });\r\n                if (list.length == 0) {\r\n                    delete $scope.channel.collectorId;\r\n                }\r\n                delete $scope.channel.status;\r\n                //  delete $scope.channel.id;\r\n                delete $scope.channel.datatime;\r\n                setWriterForViewer(angular.copy($scope.channel.writers));\r\n                $edit_table.slideDown();\r\n                $search_table.slideUp();\r\n                upload_table.slideUp();\r\n                delete $scope.myFile;\r\n                $scope.$apply();\r\n\r\n            };\r\n        })();\r\n        try {\r\n            reader.readAsText(file);\r\n        }\r\n        catch (e) {\r\n            $scope.message = {\r\n                status: '500',\r\n                message: '数据解析出错,你检查你的数据文件是否正确!'\r\n            };\r\n\r\n        }\r\n\r\n    };\r\n\r\n    function PropertiesWithType() {\r\n        let reg = /^(true)|(false)|\\d+$/;\r\n        for (let item in $scope.channel.properties) {\r\n            let v = $scope.channel.properties[item];\r\n            if (v && reg.test(v)) {\r\n                $scope.channel.properties[item] = eval(v)\r\n            }\r\n        }\r\n    }\r\n\r\n    $scope.show = function (clazz, id) {\r\n\r\n        let $edit_table = $('.hla-widget-add-table');\r\n        let $search_table = $('.hla-widget-search-table');\r\n        let upload_table = $('.hla-widget-upload-table');\r\n        let metric_table = $('.hla-widget-metric-table');\r\n        Util.resetFormValidateState($scope.ds_form);\r\n        switch (clazz) {\r\n            case 'upload':\r\n                delete  $scope.message;\r\n                $edit_table.slideUp();\r\n                $search_table.slideUp();\r\n                metric_table.slideUp();\r\n                upload_table.slideToggle();\r\n                break;\r\n\r\n            case 'search':\r\n                delete  $scope.message;\r\n\r\n                $edit_table.slideUp();\r\n                $search_table.slideToggle();\r\n                metric_table.slideUp();\r\n                upload_table.slideUp();\r\n                break;\r\n            case 'add':\r\n                delete  $scope.message;\r\n                $edit_table.slideToggle();\r\n                $search_table.slideUp();\r\n                metric_table.slideUp();\r\n                upload_table.slideUp();\r\n                $scope.resetForm();\r\n                break;\r\n            case 'metric-parser':\r\n                delete  $scope.message;\r\n                $scope.channel.type.name = 'parser'\r\n                $scope.metrics(id);\r\n                $edit_table.slideUp();\r\n                $search_table.slideUp();\r\n                metric_table.slideDown();\r\n                upload_table.slideUp();\r\n\r\n                break;\r\n            case 'metric-analyzer':\r\n                delete  $scope.message;\r\n                $scope.channel.type.name = 'analyzer'\r\n                $scope.metrics(id);\r\n                $edit_table.slideUp();\r\n                $search_table.slideUp();\r\n                metric_table.slideDown();\r\n                upload_table.slideUp();\r\n\r\n                break;\r\n            case 'edit':\r\n                delete  $scope.message;\r\n                Channel.get({id: id}, function (ds) {\r\n                    $scope.channel = ds;\r\n                    //console.log('$scope.channel='+JSON.stringify($scope.channel));\r\n                    if ($scope.channel.type.name === \"parser\") {\r\n                        if ($scope.datasources.filter(function (item) {\r\n                                return item.id === $scope.channel.datasource;\r\n                            }).length === 0) {\r\n                            delete $scope.channel.datasource\r\n                        }\r\n                    } else {\r\n                        $scope.channels = defaultChannels.filter(function (item) {\r\n                            return item.id !== $scope.channel.id;\r\n                        });\r\n                        if ($scope.channels.filter(function (item) {\r\n                                return item.id === $scope.channel.datasource;\r\n                            }).length === 0) {\r\n                            delete $scope.channel.datasource\r\n                        }\r\n                    }\r\n\r\n\r\n                    if ($scope.collectors.filter(function (item) {\r\n                            return item.id === $scope.channel.collector;\r\n                        }).length === 0) {\r\n                        delete $scope.channel.collector\r\n                    }\r\n                    if ($scope.resolvers.filter(function (item) {\r\n                            return item.id === $scope.channel.parser;\r\n                        }).length === 0 && $scope.analyzers.filter(function (item) {\r\n                            return item.id === $scope.channel.parser;\r\n                        }).length === 0) {\r\n                        delete $scope.channel.parser\r\n                    }\r\n                    setWriterForViewer(angular.copy(ds.writers));\r\n                    PropertiesWithType();\r\n                    upload_table.slideUp();\r\n                    $edit_table.slideDown();\r\n                    metric_table.slideUp();\r\n                    $search_table.slideUp();\r\n                });\r\n\r\n                break;\r\n            case 'copy':\r\n                delete  $scope.message;\r\n                Channel.get({id: id}, function (ds) {\r\n                    $scope.channel = ds;\r\n                    console.log($scope.channel.properties.collector_info);\r\n                    console.log($scope.channel.properties.receive_time);\r\n\r\n                    $scope.channel.name = $scope.channel.name + '_copy';\r\n                    delete $scope.channel.id;\r\n                    delete $scope.channel.status;\r\n                    delete $scope.channel.datatime;\r\n                    setWriterForViewer(angular.copy(ds.writers));\r\n                    PropertiesWithType();\r\n                    $edit_table.slideDown();\r\n                    $search_table.slideUp();\r\n                    metric_table.slideUp();\r\n                    upload_table.slideUp();\r\n                });\r\n\r\n                break;\r\n            default:\r\n                $edit_table.slideUp();\r\n                $search_table.slideUp();\r\n                metric_table.slideUp();\r\n                upload_table.slideUp();\r\n                break;\r\n        }\r\n\r\n    };\r\n    $scope.operate = function (opt, id) {\r\n        Channel.operate({opt: opt, id: id}, function (rt) {\r\n            //console.log('rt='+JSON.stringify(rt))\r\n            $scope.message = rt;\r\n            $scope.reload();\r\n        }, function (error) {\r\n            var content = \"\"\r\n            if (error.status == 500) {\r\n                content = error.data;\r\n            }\r\n            else if (error.status == -1) {\r\n                content = \"Connect to server has timed out, please try again later.\";\r\n            }\r\n            else {\r\n                content = \"Others exception.\"\r\n            }\r\n            var message = {\r\n                message: content\r\n            }\r\n            $scope.message = message;\r\n        });\r\n\r\n    };\r\n\r\n    //删除按钮\r\n    $scope.delete = function (id) {\r\n        $scope.deleteId = id;\r\n        $confirmModal.modal('show');\r\n    };\r\n    //删除确定\r\n    $scope.confirm_yes = function () {\r\n        Channel.delete({id: $scope.deleteId}, function (rt) {\r\n            $scope.message = rt;\r\n            $scope.reload();\r\n        });\r\n        $confirmModal.modal('hide');\r\n    };\r\n    $confirmModal.find('.op_yes').off().click(function () {\r\n        $scope.confirm_yes();\r\n    });\r\n    $scope.reload = function () {\r\n        $scope.list = Channel.get($scope.page, function (pages) {\r\n            if (pages.result.length > 0) {\r\n                //console.log('pages.result='+JSON.stringify(pages.result));\r\n                pages.result = pages.result.map(function (channel) {\r\n                    return channel;\r\n                });\r\n            }\r\n            else {\r\n                pages.result = [];\r\n            }\r\n        });\r\n    };\r\n    $scope.addHostPort = function () {\r\n        let listens = $scope.channel.data.hostPorts;\r\n        if (!listens) {\r\n            listens = $scope.channel.data.hostPorts = [];\r\n        }\r\n        listens.push(['', 9300]);\r\n    };\r\n    $scope.removeHostPort = function (index) {\r\n        $scope.channel.data.hostPorts.splice(index, 1);\r\n    };\r\n\r\n    $scope.addHostEncoding = function () {\r\n        let listens = $scope.channel.data.listens;\r\n        if (!listens) {\r\n            listens = $scope.channel.data.listens = [];\r\n        }\r\n        listens.push(['', '']);\r\n    };\r\n    $scope.removeHostEncoding = function (index) {\r\n        $scope.channel.data.listens.splice(index, 1);\r\n    };\r\n\r\n    //修复数据存储checkbox选中状态\r\n    function setWriterForViewer(writers) {\r\n        if ($scope.writers.$resolved) {\r\n            let tempWriters = new Array($scope.writers.length);\r\n            if (writers) {\r\n\r\n\r\n                for (let i = 0, j = writers.length; i < j; i++) {\r\n                    let writer = writers[i];\r\n                    if (writer) {\r\n                        let index = getIndex(writer);\r\n                        if (index.length == 2) {\r\n                            tempWriters[index[0]] = {id: index[1].id, name: index[1].name};\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            $scope.channel.writers = tempWriters;\r\n        }\r\n\r\n        function getIndex(id) {\r\n            let data = [];\r\n\r\n            for (let i = 0, j = $scope.writers.length; i < j; i++) {\r\n                if ($scope.writers[i].id == id) {\r\n                    data = [i, $scope.writers[i]];\r\n                    break;\r\n                }\r\n            }\r\n            return data;\r\n        }\r\n    }\r\n\r\n\r\n    //移除数据存储null值\r\n    function setForSave(writers) {\r\n        return (writers || []).filter(function (writer) {\r\n            return writer != null && writer != undefined;\r\n        }).map(function (writer) {\r\n            console.log(writer);\r\n            return writer.id;\r\n        });\r\n    }\r\n\r\n    $scope.changeDBType = function () {\r\n        let type = $scope.channel.data.protocol;\r\n        let port = null;\r\n        switch (type) {\r\n            case 'mysql':\r\n                port = 3306;\r\n                break;\r\n            case 'oracle':\r\n                port = 1521;\r\n                break;\r\n            case 'sqlserver':\r\n                port = 1433;\r\n                break;\r\n            case 'DB2':\r\n                port = 50000;\r\n                break;\r\n            case 'sybase':\r\n                port = 5000;\r\n                break;\r\n            case 'postgresql':\r\n                port = 5432;\r\n                break;\r\n            case 'sqlite':\r\n                port = 0;\r\n                break;\r\n            case 'derby':\r\n                port = 1527;\r\n                break;\r\n        }\r\n        $scope.channel.data.port = port;\r\n    };\r\n    $scope.downloadFile = function (itemId) {\r\n//        console.log(sqlItemId);\r\n        Channel.download({id: itemId}, function (response) {\r\n            let fileName = '数据通道配置';\r\n            fileName = decodeURI(fileName);\r\n            let url = URL.createObjectURL(new Blob([response.data]));\r\n            let a = document.createElement('a');\r\n            document.body.appendChild(a); //此处增加了将创建的添加到body当中\r\n            a.href = url;\r\n            a.download = fileName + '-' + itemId + '.json';\r\n            a.target = '_blank';\r\n            a.click();\r\n            a.remove(); //将a标签移除\r\n        }, function (response) {\r\n//            console.log(response);\r\n        });\r\n    }//\r\n});\r\n"]}